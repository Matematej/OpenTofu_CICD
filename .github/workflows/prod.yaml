name: Nasazování do Produkčního prostředí

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  TF_VAR_prefix: ${{ vars.PREFIX }}
  TF_VAR_location: ${{ vars.LOCATION }}
  TF_VAR_admin_password: ${{ vars.ADMIN_PASSWORD }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
  STORAGE_ACCOUNT_NAME: ${{ vars.STORAGE_ACCOUNT_NAME }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  STATE_KEY: ${{ vars.STATE_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Set up OpenTofu
        uses: opentofu/setup-opentofu@v1

      - name: OpenTofu fmt
        id: fmt
        run: tofu fmt
        continue-on-error: true

      - name: OpenTofu Init
        id: init
        run: tofu init -reconfigure -input=false -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ env.CONTAINER_NAME }}" -backend-config="key=${{ env.STATE_KEY }}" -backend-config="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}"

      - name: OpenTofu Validate
        id: validate
        run: tofu validate -no-color

      - name: OpenTofu Plan
        id: plan
        run: tofu plan -no-color
        if: github.event_name == 'push'
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: tofu apply -auto-approve -input=false

      - name: Test VM Status
        id: test_status
        run: |
          retries=10
          delay=30
          resource_group="${{ vars.PREFIX }}-resources"
          vm_name="${{ vars.PREFIX }}-vm"

          for i in $(seq 1 $retries); do
            # Fetch the VM power state
            vm_status=$(az vm get-instance-view --name $vm_name --resource-group $resource_group --query "instanceView.statuses[1].displayStatus" --output tsv)
            
            # Output the status for debugging purposes
            echo "Attempt $i: VM Status: '$vm_status'"
            
            # Compare with the expected state
            if [ "$vm_status" == "VM running" ]; then
              echo "VM is running!"
              
              # Check the VM image reference
              image_reference=$(az vm show -n $vm_name -g $resource_group --query "storageProfile.imageReference" --output json)
              echo "VM Image Reference: $image_reference"
              
              exit 0
            fi
            
            echo "VM is not running, retrying in $delay seconds..."
            sleep $delay
          done

          echo "VM is not running after $((retries * delay)) seconds."
          exit 1
